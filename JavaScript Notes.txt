Need of javascript or scripting technology:
--------------------------------------------
1)when we want to include our own logic when i execute a page then i will use javascript .
2)In this i will use two tags <script>  and closing </script> tag.
3)If there are controls in the form to validate the controls also we use javascript.
eg:Inside a  text box of i should not enter more than 6 characters to do that i will write a code in javascript
and give user a alert message when he does mistakes
4) Javascript is completely at the client side anybody can check the code and see its execution if u allow or check the browser to include script code.
5)The script code can be written after <head> tag or it can be placed inside a body also.
6)To declare a variable we use var datatype it takes any arguments of our choice means if i supply 30 it will become a data type of integer and if i supply string say "mohan" it will become string data type.
7)To print any message i use document.write method .
8)All html tags are valid and can be used in document.write( ) method.
9)The tags can be used anywhere after <head> and also after <body> it will work fine.


example1 for javascript 
-----------------------
<html>
<head>
<title>javascript demo </title>
<script language='javascript'>
var x=45;
var name="ramesh";
document.write("<h2>"+name +" is " +x+" years old </h2><br>");
document.write("<h2>hello world<br>")
</script>
</head>
<body>
<h1>This is a sample example on javascript 
</h1>
</body>
</html>

syntax for function:
----------------------
function function_name (paramters value)
{


}
eg :add(x,y)
{
  var z;
  z=x +y;
  document.write("The sum is "+z);
}
example 2 :
------------
<html><head>
<title>Strings  
</title></head>
<body>
<h2>parse Int and parse float demo </h2>
<script  type='text/javascript'>
function add(x,y)
{
var total;
total=parseInt(x) + parseInt(y);
alert (total);
}</script>
1st number <input type="text"  name="Myname1"  value=" "><br>
2nd number <input type="text"  name="Myname2"  value=" "><br>
<input type="button"  name=ok  value="largest"  onClick=add(Myname1.value,Myname2.value)>  
</body>
</html>
Note: for decimal value conversion use parseFloat() in the above coding.

some more coding so here u can see that 
when u click the div tag and it output is changed according to what u have written 

<html>
<head>
</head>
<body>
<div id='feedback' onClick='goodbye()'>Users without Javascript see  this.</div>
<script type='text/javascript'> 
document.getElementById('feedback').innerHTML='Hello World!';
function goodbye() {
document.getElementById('feedback').innerHTML='Goodbye World!';
}
</script>
</body>
</html>

some more coding where u have a textbox and button and then and by click of button i am showing the output in div tag and u can see how getelementbyid syntax is used earlier and now in this program and all 

<HTML>
<HEAD> </HEAD>
<BODY> 
<input id='userInput' size=60> <button  
onClick='userSubmit()'>Submit</button><BR>
<P><div id='result'></div>
<script type='text/javascript'>
function userSubmit() {
var UI=document.getElementById('userInput').value;
document.getElementById('result').innerHTML='You typed: '+UI;
}
</script>
</BODY>
</HTML>
some more coding for javascript and all 
<html><head><title>My First Javascript</title>
</head><body>Hello World!
<p>Say what? <input id="sayThis" size=40>
<P>How many times? <select id='howMany'>
<option value=1>1</option>
<option value=5 selected>5</option>
<option value=10>10</option>
<option value=20>20</option>
</select>
<p><button onClick='doLoop()'>Do It!</button>
<p><div id="results"></div>
<script type='text/javascript'>
function doLoop() {
var sayWhat = document.getElementById('sayThis').value;
var maxLoop = document.getElementById('howMany').value;
var str = ''; // where we'll store our output temporarily.
for (var i=1; (i<=maxLoop); i++) {
str=str+i+':'+sayWhat+'<br>';
}
document.getElementById("results").innerHTML=str;
}
</script>
</body>
</html>


JavaScript uses dialog boxes to interact with the user. The dialog boxes are created with three methods:

alert()
prompt()
confirm()
alert:
------
 Another way to send output to the browser is with the alert() method. The alert() method creates a little independent box—called a dialog box—which contains a small triangle with an exclamation point. 

syntax:

alert("String of plain text");
alert(expression);

eg:
alert("Phone number is incorrect");
alert(a + b);
prompt :
-------
Since JavaScript does not provide a simple method for accepting user input , the prompt dialog box and HTML forms are used  The prompt dialog box pops up with a simple textfield box.

syntax:
prompt(message);
prompt(message, defaultText);

eg:
prompt("What is your name? ", "");
prompt("Where is your name? ", name);

The Confirm Box:
-----------------
The confirm dialog box is used to confirm a user's answer to a question. A question mark will appear in the box with an OK button and a Cancel button. If the user presses the OK button, true is returned; if he presses the Cancel button, false is returned. This method takes only one argument, the question you will ask the user.

example 5:
----------
<html>
    <head>
    <title>using prompt box with if else</title>
    </head>    <body>
        <script language = "JavaScript">
         var name=prompt("What is your name?", "");
           document.write("<br>Welcome to my world! "
               + name + "<br>");
           var age=prompt("Tell me your age.", "Age");
           if ( age==null){    
              alert("Not sharing your age with me");
           }
            else{
              alert(age + " is young");
            }
          alert(prompt("Where do you live? ", ""));
        </script>
    </body>
    </html>
example 6:
----------
<html>
  <head>
  <title>Using the JavaScript confirm box</title>
   </head>
  <body>
        <script language = "JavaScript">
          if(confirm("Are you really OK?") == true){
              alert("Then we can finish the work");
            }
            else{
              alert("We'll try when you feel better? ");
            }
        </script>
    </body>
    </html>
example 9:
-----------
<html><head>
<title>Strings </title></head>
<body>
<h2>if else are tested here .... </h2>
<script language="javascript">
function Test(str1,str2,str3)
{
x=parseInt(str1);
y=parseInt(str2);
z=parseInt(str3);
if( ( x >y )  && ( x > z))
document.write("The largest number is "+x);
else if((y > z) && ( y > x)) 
document.write("The largest number is " +y);
else
document.write("The largest number is " +z);
}
</script>
1st number <input type="text"  name="Myname1"  value=" "><br>
2nd number <input type="text"  name="Myname2"  value=" "><br>
3rd number <input type="text"  name="Myname3"  value=" "><br>
<input type=button  name=ok  value="largest " 
 onClick=Test(Myname1.value,Myname2.value,Myname3.value)>  
</body></html>

To check email is valid or not :
__________________________________
<script>
function validate()
{
var x;
x=document.getElementById('email').value;
var atpos=x.indexOf('@');
alert(atpos);
var dotpos=x.lastIndexOf('.');
alert(dotpos);
alert(x.length);
var c=x.length-dotpos;
if (atpos<1 || dotpos<atpos+2 || dotpos+2>=x.length || c>4)
  {
  alert("Not a valid e-mail address");
  return false;
  }
}
</script>
<body>
<form>
<input type="text" id="email" >
<input type="button" onclick="validate()" value="click">
</form>
</body>

To click the button and use of or operator :
____________________________________________
<script>
function aa(firstvar,secondvar)
{
var first= firstvar || 10;
var second = secondvar ||10;
var c = first+second;
alert( c);
}
</script>

<body>

<input type="submit" onclick="aa()"> <br>
<input type="submit" onclick="aa(10)"> <br>
<input type="submit" onclick="aa(11,10)"> <br>
</body>

validating an basic html form using javascript :
-------------------------------------------------
<html><head>
<title>Form Validation</title>
<script type="text/javascript">
function validate()
{
 
   if( document.myForm.Name.value == "" )
   {
     alert( "Please provide your name!" );
     document.myForm.Name.focus() ;
     return false;
   }
   if(document.myForm.EMail.value == "" )
   {
     alert( "Please provide your Email!" );
     document.myForm.EMail.focus() ;
     return false;
   }
   if(document.myForm.Zip.value == "" ||
           isNaN( document.myForm.Zip.value ) ||
           document.myForm.Zip.value.length != 5 )
   {
     alert( "Please provide a zip in the format #####." );
     document.myForm.Zip.focus() ;
     return false;
   }
   if(document.myForm.Country.value == "-1" )
   {
     alert( "Please provide your country!" );
     return false;
   }
   return( true );
}
</script>
</head>
<body>
 <form action="/cgi-bin/test.cgi" name="myForm"  
          onsubmit="return(validate());">
 <table cellspacing="2" cellpadding="2" border="1">
 <tr>
   <td align="right">Name</td>
   <td><input type="text" name="Name" /></td>
 </tr>
 <tr>
   <td align="right">EMail</td>
   <td><input type="text" name="EMail" /></td>
 </tr>
 <tr>
   <td align="right">Zip Code</td>
   <td><input type="text" name="Zip" /></td>
 </tr>
 <tr>
 <td align="right">Country</td>
 <td>
 <select name="Country">
   <option value="-1" selected>[choose yours]</option>
   <option value="1">USA</option>
   <option value="2">UK</option>
   <option value="3">INDIA</option>
 </select>
 </td>
 </tr>
 <tr>
   <td align="right"></td>
   <td><input type="submit" value="Submit" /></td>
 </tr>
 </table> </form>
 </body> </html>
CSS BOx Model :
---------------
One of the powerful features of modern HTML and Cascading Style Sheets (CSS) for web development is that you can almost completely separate the markup of your page in HTML from the rendering details specified in your CSS. An HTML page using a small selection of tags and some CSS styling can look like… well, just about anything you like. And you can change how it looks by simply changing the CSS.

A basic - but often misunderstood - feature of CSS styling is something called the box model. The box model simply defines the rectangular space around an element and is defined by three properties:

    border
    padding
    margin



The border represents the effective outer limit of the element itself. The border can be either visible or invisible, and has properties for line type, color, and width.

Padding specifies the spacing between the border and any content within the HTML element. If there’s no visible border, then the extent of the padding is effectively the extent of the element. Any background CSS properties associated with the element are displayed within the area defined by the border and padding properties.

The margin represents the distance between the outer edge of the border and any neighboring elements. This is often a source of confusion as it’s easy to think of the margin as a kind of “padding” between elements. Better to think of it like the margin of a page: it represents the outer edge of the object. The margin is effectively transparent and will not reflect any of the background properties specified for the element.

first width and height will come for the element which u define and then u define border and this content has to be how much far from border is decided by padding stuff and the border should be away from the page is decided by margin tags which can be applied as u know to four corners and another thing is u will use maximum div tags to implement css box model okay .



<html>
<head>
<title >The box model example </title>
<style type="text/css">
body {background: black;}
#container {
    background: gray; 
    width: 600px; 
    margin: 0px auto; 
    border: 1px solid black;}
	
	p { background: white;
    border: 20px solid red; 
    margin-top: 20px;
    margin-right: 20px;
    margin-bottom: 20px;
    margin-left: 20px;
    padding-top: 20px;
    padding-right: 20px;
    padding-bottom: 20px;
    padding-left: 20px; }
</style>
</head>
<body>
<div id="container">
    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
      sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
</div>	
	</body>
</html>
so we can give it in a single line as well like this margin: [top] [right] [bottom] [left]

if u want to bring the div in the middle irespective of browser movement u can do like this use auto at right and left of the margin 

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>First Styles </title>
<style type="text/css">

#container{ 
background-color:yellow;
padding:20px;
border:5px solid red;
margin-top:20px;
margin-left:auto;
margin-right:auto;
margin-bottom:1em;
width:50%;


}

</style>
</head>
<body>
<div id="container">
this is a good example this is a good example 
this is a good example 
this is a good example 
this is a good example 
this is a good example 
this is a good example 
this is a good example 
this is a good example 
this is a good example 
this is a good example 
this is a good example 
this is a good example 
this is a good example 
this is a good example 
this is a good example 
this is a good example 
this is a good example 
this is a good example 
this is a good example 
this is a good example 


</div>


</body>
</html>



